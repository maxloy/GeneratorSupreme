@{
	DataManager.DataChanged += (obj, args) => StateHasChanged();
}

<select class="selectpicker form-control" @onchange=UpdateGUID id=@ID>
	@{
		var list = DataManager.Data.Where(item => item != Exclude).ToList();
		if(list.Count == 0 && !string.IsNullOrEmpty(SelectedGUID))
		{
			SelectedGUID = "";
			SelectedGUIDChanged.InvokeAsync(SelectedGUID);
		}
	}
	@for (int i = 0; i < list.Count; i++)
	{
		var generator = list[i];
		string content = "<img class=pb-1 src=" + DataManager.GetIcon(generator.GetType()) + " /> " + generator.Name;
		bool selected = false;
		//add the selected keyword if this is guid is the currently selected one
		if (SelectedGUID == generator.GUID.ToString())
		{
			selected = true;
		}
		//or if nothing is selected and this is the first option
		else if (i == 0 && (string.IsNullOrEmpty(SelectedGUID) || DataManager.Data.Any(item => item.GUID.ToString() == SelectedGUID) == false))
		{
			selected = true;
			//because this is selecting an option that is not the currently selected GUID, we need to update the selected guid and fire the changed event
			SelectedGUID = generator.GUID.ToString();
			SelectedGUIDChanged.InvokeAsync(SelectedGUID);
		}
		if (selected)
		{
			<option selected value=@generator.GUID.ToString() data-content=@content></option>
		}
		else
		{
			<option value=@generator.GUID.ToString() data-content=@content></option>
		}
	}
</select>
@code
{
	[Parameter]
	public string ID { get; set; } = "";

	[Parameter]
	public DataManager DataManager { get; set; } = null!;

	[Parameter]
	public string SelectedGUID { get; set; } = "";

	[Parameter]
	public NameGenToolkit.NameGenerator Exclude { get; set; } = null!;

	[Parameter]
	public EventCallback<string> SelectedGUIDChanged { get; set; }

	private async Task UpdateGUID(ChangeEventArgs args)
	{
		SelectedGUID = args.Value?.ToString()!;
		await SelectedGUIDChanged.InvokeAsync(SelectedGUID);
	}

	// inject jsruntime to call javascript code
	[Inject] public IJSRuntime JSRuntime { get; set; } = null!;

	// call the javascript method to init the select picker
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await JSRuntime.InvokeVoidAsync("InitSelectPicker", DotNetObjectReference.Create(this), "OnSelectedValue", "#" + ID);
	}

	// method which will be triggered by javascript, need to pass the method name
	[JSInvokable]
	public void OnSelectedValue(string val)
	{
		SelectedGUID = val;
		StateHasChanged();
	}
}
