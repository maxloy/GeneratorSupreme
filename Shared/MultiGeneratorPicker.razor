
<div class="card mb-2">
	<div class="card-header h5">
		Sources
	</div>
	<div class="card-body p-2">
		@for (int i = 0; i < PickedGUIDS.Count; i++)
		{
			int index = i; //note: gotta bind locally to this context or it won't work //I hate that this works
			<div class="input-group d-flex align-middle">
				<span class="input-group-text">@index</span>

				<span class="w-75">
					<GeneratorPicker DataManager=DataManager
								 Exclude=Exclude
								 ID=@(ID + "_multi_" + index)
								 SelectedGUID=@PickedGUIDS[index]
								 SelectedGUIDChanged=@((e) => ChangeGUIDAt(index, e)) />
				</span>

				@if (ShowWeightBox)
				{
					<input type="number"
					   class="form-control"
					   value=@(Weights[i])
					   step=1.0000000
					   @onchange=@((e) =>
					   {
						   if(e.Value != null && float.TryParse(e.Value.ToString(), out float val))
						   {
						   ChangeWeightAt(index,val);
						   }
						}) />
				}

				<button class="btn btn-outline-danger btn-sm h-auto" type="button" @onclick=@(() => RemoveAt(index))>-</button>
			</div>
		}
	</div>

	<div class="d-flex gap-3 p-2">
		@*picker*@
		<GeneratorPicker DataManager=DataManager Exclude=Exclude @bind-SelectedGUID=SelectedAddGUID ID=@(ID + "_multi_add_picker") />
		@*add*@
		<button class="btn btn-success" type="button" @onclick=Add>Add</button>
	</div>
</div>

@code {
	[Parameter]
	public DataManager DataManager { get; set; } = null!;

	[Parameter]
	public List<string> PickedGUIDS { get; set; } = new();
	[Parameter]
	public EventCallback<List<string>> PickedGUIDSChanged { get; set; }

	[Parameter]
	public NameGenToolkit.NameGenerator Exclude { get; set; } = null!;

	[Parameter]
	public bool ShowWeightBox { get; set; } = false;

	[Parameter]
	public List<float> Weights { get; set; } = new();
	[Parameter]
	public EventCallback<List<float>> WeightsChanged { get; set; }

	[Parameter]
	public string ID { get; set; } = "";

	string SelectedAddGUID = "";

	void UpdatePickedGUIDS()
	{
		PickedGUIDSChanged.InvokeAsync(PickedGUIDS);
		WeightsChanged.InvokeAsync(Weights);
	}

	void ChangeGUIDAt(int index, string value)
	{
		PickedGUIDS[index] = value;
		UpdatePickedGUIDS();
	}

	void ChangeWeightAt(int index, float value)
	{
		Weights[index] = value;
		UpdatePickedGUIDS();
	}

	void RemoveAt(int index)
	{
		PickedGUIDS.RemoveAt(index);
		Weights.RemoveAt(index);
		StateHasChanged();
		UpdatePickedGUIDS();
	}

	void Add()
	{
		PickedGUIDS.Add(SelectedAddGUID);
		Weights.Add(1);
		StateHasChanged();
		UpdatePickedGUIDS();
	}
}
