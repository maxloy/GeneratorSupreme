@page "/"
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JS

<div class="container-fluid p-3">
	<div class="row">
		@*left side title*@
		<div class="col-lg-2">
			<div class="d-flex flex-column h-100">
				<div class="flex-grow-1">
					<h1 class="display-1 align-top auto-rotate fw-bold">Generate.ZONE</h1>
				</div>
				<div class="flex-shrink-1 d-grid">
					<div class="row gap-3 m-2">
						<button class="btn btn-success btn-lg col" @onclick=SaveToFile>SAVE<br />to file</button>
						<button class="btn btn-primary btn-lg col" @onclick=PromptLoadFile>LOAD<br />from file</button>
					</div>
				</div>
			</div>
		</div>
		@*middle col/meaty part*@
		<div class="col">
			@*most things*@
			<div class="row">
				<div class="col-lg-8">
					@*collection name*@
					<div class="row">
						<div class="mb-2">
							<div class="d-flex align-items-center">
								<div class="flex-shrink-1">
									<i class="bi bi-pencil"></i>
								</div>
								<div class="flex-grow-1">
									<input @bind=DataManager.GeneratorCollectionName type="text" class="h1 form-control-plaintext" />
								</div>
								<div class="flex-shrink-1">
									<button class="btn btn-outline-danger" @onclick=PromptClearAll><i class="bi bi-trash-fill"></i>CLEAR<br />all</button> @* data-bs-toggle="modal" data-bs-target="#modalDanger"*@
								</div>
							</div>
						</div>
					</div> @*collection name*@

					<div class="row">
						@*Primary generators*@
						<div class="col-lg-6">
							<GeneratorList DataManager=@DataManager Filter=@DataManager.DoesntUseSubGenerators ID="source_gens" DisplayName="Primaries" />
						</div> @*Primary generators*@

						@*Secondary generators*@
						<div class="col-lg-6">
							<GeneratorList DataManager=@DataManager Filter=@DataManager.UsesSubGenerators ID="mod_gens" DisplayName="Combiners" />
						</div> @*Secondary generators*@
					</div>

				</div>
				@*Center columns*@

				@*sidebar*@
				<div class="col-lg-3 p-0 ps-4 pt-3 m-0">
					<GeneratorOutput DataManager=@DataManager />
				</div> @*sidebar*@

			</div>
		</div>
	</div>
</div>@*all things*@

@code
{
	DataManager DataManager = new();
	const string SAVE_KEY = "SAVE_DATA";

	protected override async Task OnInitializedAsync()
	{
		var cachedData = await sessionStorage.GetItemAsync<string>(SAVE_KEY);
		if (cachedData != null)
		{
			DataManager.Load(cachedData);
		}

		var timer = new PeriodicTimer(TimeSpan.FromSeconds(1));
		while (await timer.WaitForNextTickAsync())
		{
			Save();
		}
	}

	void Save()
	{
		sessionStorage.SetItemAsync(SAVE_KEY, DataManager.Save());
	}

	void PromptClearAll()
	{
		string header = "Clear all";
		string body = "Are you sure you want to delete everything? This cannot be undone.";
		Action callback = DataManager.ClearAll;
		ModalManager.SetModalData(header, body, callback);
		JS.InvokeVoidAsync("showBootstrapModal", "#modalDanger");
	}

	async Task SaveToFile()
	{
		string fileName = DataManager.GeneratorCollectionName + ".json";
		string saveData = DataManager.Save();

		await JS.InvokeVoidAsync("downloadFile", fileName, saveData);
	}

	void PromptLoadFile()
	{
		if (DataManager.Data.Count > 0)
		{
			string header = "Load From File";
			string body = "Loading data from a file will clear all of your existing data. Are you sure you want to do this?";
			ModalManager.SetModalData(header, body, () => { LoadFromFile(); });
			JS.InvokeVoidAsync("showBootstrapModal", "#modalDanger");
		}
		else
		{
			LoadFromFile();
		}

	}

	async Task LoadFromFile()
	{
		string filedata = await JS.InvokeAsync<string>("loadLocalFile");

		if (!string.IsNullOrEmpty(filedata))
		{
			DataManager.Load(filedata);
		}
	}
}